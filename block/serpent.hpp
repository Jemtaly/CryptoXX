#pragma once
#include "block.hpp"
#include <array>
#define XK(r, i, j, k, l) { \
    x[i] ^= rk[4 * r +  8]; \
    x[j] ^= rk[4 * r +  9]; \
    x[k] ^= rk[4 * r + 10]; \
    x[l] ^= rk[4 * r + 11]; \
}
#define LK(r, i, j, k, l) { \
    x[i]  = rk[4 * r +  8]; \
    x[j]  = rk[4 * r +  9]; \
    x[k]  = rk[4 * r + 10]; \
    x[l]  = rk[4 * r + 11]; \
}
#define SK(r, i, j, k, l) { \
    rk[4 * r +  8]  = x[i]; \
    rk[4 * r +  9]  = x[j]; \
    rk[4 * r + 10]  = x[k]; \
    rk[4 * r + 11]  = x[l]; \
}
#define XXROTL(i, j, k, l) {                  \
    x[i] = ROTL(x[i]                   , 13); \
    x[k] = ROTL(x[k]                   ,  3); \
    x[l] = ROTL(x[l] ^ x[k] ^ x[i] << 3,  7); \
    x[j] = ROTL(x[j] ^ x[i] ^ x[k]     ,  1); \
    x[i] = ROTL(x[i] ^ x[j] ^ x[l]     ,  5); \
    x[k] = ROTL(x[k] ^ x[l] ^ x[j] << 7, 22); \
}
#define XXROTR(i, j, k, l) {                  \
    x[k] = ROTR(x[k], 22) ^ x[l] ^ x[j] << 7; \
    x[i] = ROTR(x[i],  5) ^ x[j] ^ x[l]     ; \
    x[j] = ROTR(x[j],  1) ^ x[i] ^ x[k]     ; \
    x[l] = ROTR(x[l],  7) ^ x[k] ^ x[i] << 3; \
    x[k] = ROTR(x[k],  3)                   ; \
    x[i] = ROTR(x[i], 13)                   ; \
}
#define SB0(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i0] ^ x[i3];                    \
    t[ 2] = x[i0] & x[i3];                    \
    t[ 3] = x[i2] ^ t[ 1];                    \
    t[ 6] = x[i1] & t[ 1];                    \
    t[ 4] = x[i1] ^ t[ 3];                    \
    t[10] =       ~ t[ 3];                    \
    x[i7] = t[ 2] ^ t[ 4];                    \
    t[ 7] = x[i0] ^ t[ 6];                    \
    t[14] =       ~ t[ 7];                    \
    t[ 8] = x[i2] | t[ 7];                    \
    t[11] = t[ 3] ^ t[ 7];                    \
    x[i6] = t[ 4] ^ t[ 8];                    \
    t[12] = x[i7] & t[11];                    \
    x[i5] = t[10] ^ t[12];                    \
    x[i4] = t[12] ^ t[14];                    \
}
#define IB0(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i0];                    \
    t[ 2] = x[i0] ^ x[i1];                    \
    t[ 3] = t[ 1] | t[ 2];                    \
    t[ 4] = x[i3] ^ t[ 3];                    \
    t[ 7] = x[i3] & t[ 2];                    \
    t[ 5] = x[i2] ^ t[ 4];                    \
    t[ 8] = t[ 1] ^ t[ 7];                    \
    x[i6] = t[ 2] ^ t[ 5];                    \
    t[11] = x[i0] & t[ 4];                    \
    t[ 9] = x[i6] & t[ 8];                    \
    t[14] = t[ 5] ^ t[ 8];                    \
    x[i5] = t[ 4] ^ t[ 9];                    \
    t[12] = t[ 5] | x[i5];                    \
    x[i7] = t[11] ^ t[12];                    \
    x[i4] = x[i7] ^ t[14];                    \
}
#define SB1(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i0];                    \
    t[ 2] = x[i1] ^ t[ 1];                    \
    t[ 3] = x[i0] | t[ 2];                    \
    t[ 4] = x[i3] | t[ 2];                    \
    t[ 5] = x[i2] ^ t[ 3];                    \
    x[i6] = x[i3] ^ t[ 5];                    \
    t[ 7] = x[i1] ^ t[ 4];                    \
    t[ 8] = t[ 2] ^ x[i6];                    \
    t[ 9] = t[ 5] & t[ 7];                    \
    x[i7] = t[ 8] ^ t[ 9];                    \
    t[11] = t[ 5] ^ t[ 7];                    \
    x[i5] = x[i7] ^ t[11];                    \
    t[13] = t[ 8] & t[11];                    \
    x[i4] = t[ 5] ^ t[13];                    \
}
#define IB1(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i0] ^ x[i3];                    \
    t[ 2] = x[i0] & x[i1];                    \
    t[ 3] = x[i1] ^ x[i2];                    \
    t[ 4] = x[i0] ^ t[ 3];                    \
    t[ 5] = x[i1] | x[i3];                    \
    t[ 7] = x[i2] | t[ 1];                    \
    x[i7] = t[ 4] ^ t[ 5];                    \
    t[ 8] = x[i1] ^ t[ 7];                    \
    t[11] =       ~ t[ 2];                    \
    t[ 9] = t[ 4] & t[ 8];                    \
    x[i5] = t[ 1] ^ t[ 9];                    \
    t[13] = t[ 9] ^ t[11];                    \
    t[12] = x[i7] & x[i5];                    \
    x[i6] = t[12] ^ t[13];                    \
    t[15] = x[i0] & x[i3];                    \
    t[ 0] = x[i2] ^ t[13];                    \
    x[i4] = t[15] ^ t[ 0];                    \
}
#define SB2(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i0];                    \
    t[ 2] = x[i1] ^ x[i3];                    \
    t[ 3] = x[i2] & t[ 1];                    \
    t[13] = x[i3] | t[ 1];                    \
    x[i4] = t[ 2] ^ t[ 3];                    \
    t[ 5] = x[i2] ^ t[ 1];                    \
    t[ 6] = x[i2] ^ x[i4];                    \
    t[ 7] = x[i1] & t[ 6];                    \
    t[10] = x[i4] | t[ 5];                    \
    x[i7] = t[ 5] ^ t[ 7];                    \
    t[ 9] = x[i3] | t[ 7];                    \
    t[11] = t[ 9] & t[10];                    \
    t[14] = t[ 2] ^ x[i7];                    \
    x[i6] = x[i0] ^ t[11];                    \
    t[15] = x[i6] ^ t[13];                    \
    x[i5] = t[14] ^ t[15];                    \
}
#define IB2(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i1] ^ x[i3];                    \
    t[ 2] =       ~ t[ 1];                    \
    t[ 3] = x[i0] ^ x[i2];                    \
    t[ 4] = x[i2] ^ t[ 1];                    \
    t[ 7] = x[i0] | t[ 2];                    \
    t[ 5] = x[i1] & t[ 4];                    \
    t[ 8] = x[i3] ^ t[ 7];                    \
    t[11] =       ~ t[ 4];                    \
    x[i4] = t[ 3] ^ t[ 5];                    \
    t[ 9] = t[ 3] | t[ 8];                    \
    t[14] = x[i3] & t[11];                    \
    x[i7] = t[ 1] ^ t[ 9];                    \
    t[12] = x[i4] | x[i7];                    \
    x[i5] = t[11] ^ t[12];                    \
    t[15] = t[ 3] ^ t[12];                    \
    x[i6] = t[14] ^ t[15];                    \
}
#define SB3(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i0] ^ x[i1];                    \
    t[ 2] = x[i0] & x[i2];                    \
    t[ 3] = x[i0] | x[i3];                    \
    t[ 4] = x[i2] ^ x[i3];                    \
    t[ 5] = t[ 1] & t[ 3];                    \
    t[ 6] = t[ 2] | t[ 5];                    \
    x[i6] = t[ 4] ^ t[ 6];                    \
    t[ 8] = x[i1] ^ t[ 3];                    \
    t[ 9] = t[ 6] ^ t[ 8];                    \
    t[10] = t[ 4] & t[ 9];                    \
    x[i4] = t[ 1] ^ t[10];                    \
    t[12] = x[i6] & x[i4];                    \
    x[i5] = t[ 9] ^ t[12];                    \
    t[14] = x[i1] | x[i3];                    \
    t[15] = t[ 4] ^ t[12];                    \
    x[i7] = t[14] ^ t[15];                    \
}
#define IB3(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i1] ^ x[i2];                    \
    t[ 2] = x[i1] | x[i2];                    \
    t[ 3] = x[i0] ^ x[i2];                    \
    t[ 7] = x[i0] ^ x[i3];                    \
    t[ 4] = t[ 2] ^ t[ 3];                    \
    t[ 5] = x[i3] | t[ 4];                    \
    t[ 9] = t[ 2] ^ t[ 7];                    \
    x[i4] = t[ 1] ^ t[ 5];                    \
    t[ 8] = t[ 1] | t[ 5];                    \
    t[11] = x[i0] & t[ 4];                    \
    x[i6] = t[ 8] ^ t[ 9];                    \
    t[12] = x[i4] | t[ 9];                    \
    x[i5] = t[11] ^ t[12];                    \
    t[14] = x[i0] & x[i6];                    \
    t[15] = t[ 2] ^ t[14];                    \
    t[ 0] = x[i4] & t[15];                    \
    x[i7] = t[ 4] ^ t[ 0];                    \
}
#define SB4(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i0] ^ x[i3];                    \
    t[ 2] = x[i3] & t[ 1];                    \
    t[ 3] = x[i2] ^ t[ 2];                    \
    t[ 4] = x[i1] | t[ 3];                    \
    x[i7] = t[ 1] ^ t[ 4];                    \
    t[ 6] =       ~ x[i1];                    \
    t[ 7] = t[ 1] | t[ 6];                    \
    x[i4] = t[ 3] ^ t[ 7];                    \
    t[ 9] = x[i0] & x[i4];                    \
    t[10] = t[ 1] ^ t[ 6];                    \
    t[11] = t[ 4] & t[10];                    \
    x[i6] = t[ 9] ^ t[11];                    \
    t[13] = x[i0] ^ t[ 3];                    \
    t[14] = t[10] & x[i6];                    \
    x[i5] = t[13] ^ t[14];                    \
}
#define IB4(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i2] ^ x[i3];                    \
    t[ 2] = x[i2] | x[i3];                    \
    t[ 3] = x[i1] ^ t[ 2];                    \
    t[ 4] = x[i0] & t[ 3];                    \
    x[i5] = t[ 1] ^ t[ 4];                    \
    t[ 6] = x[i0] ^ x[i3];                    \
    t[ 7] = x[i1] | x[i3];                    \
    t[ 8] = t[ 6] & t[ 7];                    \
    x[i7] = t[ 3] ^ t[ 8];                    \
    t[10] =       ~ x[i0];                    \
    t[11] = x[i2] ^ x[i7];                    \
    t[12] = t[10] | t[11];                    \
    x[i4] = t[ 3] ^ t[12];                    \
    t[14] = x[i2] | t[ 4];                    \
    t[15] = t[ 7] ^ t[14];                    \
    t[ 0] = x[i7] | t[10];                    \
    x[i6] = t[15] ^ t[ 0];                    \
}
#define SB5(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i0];                    \
    t[ 2] = x[i0] ^ x[i1];                    \
    t[ 3] = x[i0] ^ x[i3];                    \
    t[ 4] = x[i2] ^ t[ 1];                    \
    t[ 5] = t[ 2] | t[ 3];                    \
    x[i4] = t[ 4] ^ t[ 5];                    \
    t[ 7] = x[i3] & x[i4];                    \
    t[ 8] = t[ 2] ^ x[i4];                    \
    t[10] = t[ 1] | x[i4];                    \
    x[i5] = t[ 7] ^ t[ 8];                    \
    t[11] = t[ 2] | t[ 7];                    \
    t[12] = t[ 3] ^ t[10];                    \
    t[14] = x[i1] ^ t[ 7];                    \
    x[i6] = t[11] ^ t[12];                    \
    t[15] = x[i5] & t[12];                    \
    x[i7] = t[14] ^ t[15];                    \
}
#define IB5(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i2];                    \
    t[ 2] = x[i1] & t[ 1];                    \
    t[ 3] = x[i3] ^ t[ 2];                    \
    t[ 4] = x[i0] & t[ 3];                    \
    t[ 5] = x[i1] ^ t[ 1];                    \
    x[i7] = t[ 4] ^ t[ 5];                    \
    t[ 7] = x[i1] | x[i7];                    \
    t[ 8] = x[i0] & t[ 7];                    \
    x[i5] = t[ 3] ^ t[ 8];                    \
    t[10] = x[i0] | x[i3];                    \
    t[11] = t[ 1] ^ t[ 7];                    \
    x[i4] = t[10] ^ t[11];                    \
    t[13] = x[i0] ^ x[i2];                    \
    t[14] = x[i1] & t[10];                    \
    t[15] = t[ 4] | t[13];                    \
    x[i6] = t[14] ^ t[15];                    \
}
#define SB6(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i0];                    \
    t[ 2] = x[i0] ^ x[i3];                    \
    t[ 3] = x[i1] ^ t[ 2];                    \
    t[ 4] = t[ 1] | t[ 2];                    \
    t[ 5] = x[i2] ^ t[ 4];                    \
    x[i5] = x[i1] ^ t[ 5];                    \
    t[13] =       ~ t[ 5];                    \
    t[ 7] = t[ 2] | x[i5];                    \
    t[ 8] = x[i3] ^ t[ 7];                    \
    t[ 9] = t[ 5] & t[ 8];                    \
    x[i6] = t[ 3] ^ t[ 9];                    \
    t[11] = t[ 5] ^ t[ 8];                    \
    x[i4] = x[i6] ^ t[11];                    \
    t[14] = t[ 3] & t[11];                    \
    x[i7] = t[13] ^ t[14];                    \
}
#define IB6(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i0];                    \
    t[ 2] = x[i0] ^ x[i1];                    \
    t[ 3] = x[i2] ^ t[ 2];                    \
    t[ 4] = x[i2] | t[ 1];                    \
    t[ 5] = x[i3] ^ t[ 4];                    \
    t[13] = x[i3] & t[ 1];                    \
    x[i5] = t[ 3] ^ t[ 5];                    \
    t[ 7] = t[ 3] & t[ 5];                    \
    t[ 8] = t[ 2] ^ t[ 7];                    \
    t[ 9] = x[i1] | t[ 8];                    \
    x[i7] = t[ 5] ^ t[ 9];                    \
    t[11] = x[i1] | x[i7];                    \
    x[i4] = t[ 8] ^ t[11];                    \
    t[14] = t[ 3] ^ t[11];                    \
    x[i6] = t[13] ^ t[14];                    \
}
#define SB7(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] =       ~ x[i2];                    \
    t[ 2] = x[i1] ^ x[i2];                    \
    t[ 3] = x[i1] | t[ 1];                    \
    t[ 4] = x[i3] ^ t[ 3];                    \
    t[ 5] = x[i0] & t[ 4];                    \
    t[ 7] = x[i0] ^ x[i3];                    \
    x[i7] = t[ 2] ^ t[ 5];                    \
    t[ 8] = x[i1] ^ t[ 5];                    \
    t[ 9] = t[ 2] | t[ 8];                    \
    t[11] = x[i3] & t[ 3];                    \
    x[i5] = t[ 7] ^ t[ 9];                    \
    t[12] = t[ 5] ^ x[i5];                    \
    t[15] = t[ 1] | t[ 4];                    \
    t[13] = x[i7] & t[12];                    \
    x[i6] = t[11] ^ t[13];                    \
    t[ 0] = t[12] ^ x[i6];                    \
    x[i4] = t[15] ^ t[ 0];                    \
}
#define IB7(i0, i1, i2, i3, i4, i5, i6, i7) { \
    t[ 1] = x[i0] & x[i1];                    \
    t[ 2] = x[i0] | x[i1];                    \
    t[ 3] = x[i2] | t[ 1];                    \
    t[ 4] = x[i3] & t[ 2];                    \
    x[i7] = t[ 3] ^ t[ 4];                    \
    t[ 6] =       ~ x[i3];                    \
    t[ 7] = x[i1] ^ t[ 4];                    \
    t[ 8] = x[i7] ^ t[ 6];                    \
    t[11] = x[i2] ^ t[ 7];                    \
    t[ 9] = t[ 7] | t[ 8];                    \
    x[i5] = x[i0] ^ t[ 9];                    \
    t[12] = x[i3] | x[i5];                    \
    x[i4] = t[11] ^ t[12];                    \
    t[14] = x[i0] & x[i7];                    \
    t[15] = t[ 3] ^ x[i5];                    \
    t[ 0] = x[i4] ^ t[14];                    \
    x[i6] = t[15] ^ t[ 0];                    \
}
class SerpentBase {};
template <int L>
requires (L == 4 || L == 6 || L == 8)
class SerpentTmpl: public SerpentBase {
    uint32_t rk[140] = {};
public:
    static constexpr size_t BLOCK_SIZE = 16;
    SerpentTmpl(uint8_t const *kin) {
        uint32_t x[ 8];
        uint32_t t[16];
        READ_LE(rk, kin, L);
        if constexpr (L < 8) {
            rk[L] = 1;
        }
        for (int i = 0; i < 132; ++i) {
            rk[i + 8] = ROTL(rk[i] ^ rk[i + 3] ^ rk[i + 5] ^ rk[i + 7] ^ 0x9E3779B9 ^ i, 11); 
        }
        LK( 0, 0, 1, 2, 3); SB3(0, 1, 2, 3, 4, 5, 6, 7); SK( 0, 4, 5, 6, 7);
        LK( 1, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); SK( 1, 4, 5, 6, 7);
        LK( 2, 0, 1, 2, 3); SB1(0, 1, 2, 3, 4, 5, 6, 7); SK( 2, 4, 5, 6, 7);
        LK( 3, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); SK( 3, 4, 5, 6, 7);
        LK( 4, 0, 1, 2, 3); SB7(0, 1, 2, 3, 4, 5, 6, 7); SK( 4, 4, 5, 6, 7);
        LK( 5, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); SK( 5, 4, 5, 6, 7);
        LK( 6, 0, 1, 2, 3); SB5(0, 1, 2, 3, 4, 5, 6, 7); SK( 6, 4, 5, 6, 7);
        LK( 7, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); SK( 7, 4, 5, 6, 7);
        LK( 8, 0, 1, 2, 3); SB3(0, 1, 2, 3, 4, 5, 6, 7); SK( 8, 4, 5, 6, 7);
        LK( 9, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); SK( 9, 4, 5, 6, 7);
        LK(10, 0, 1, 2, 3); SB1(0, 1, 2, 3, 4, 5, 6, 7); SK(10, 4, 5, 6, 7);
        LK(11, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); SK(11, 4, 5, 6, 7);
        LK(12, 0, 1, 2, 3); SB7(0, 1, 2, 3, 4, 5, 6, 7); SK(12, 4, 5, 6, 7);
        LK(13, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); SK(13, 4, 5, 6, 7);
        LK(14, 0, 1, 2, 3); SB5(0, 1, 2, 3, 4, 5, 6, 7); SK(14, 4, 5, 6, 7);
        LK(15, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); SK(15, 4, 5, 6, 7);
        LK(16, 0, 1, 2, 3); SB3(0, 1, 2, 3, 4, 5, 6, 7); SK(16, 4, 5, 6, 7);
        LK(17, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); SK(17, 4, 5, 6, 7);
        LK(18, 0, 1, 2, 3); SB1(0, 1, 2, 3, 4, 5, 6, 7); SK(18, 4, 5, 6, 7);
        LK(19, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); SK(19, 4, 5, 6, 7);
        LK(20, 0, 1, 2, 3); SB7(0, 1, 2, 3, 4, 5, 6, 7); SK(20, 4, 5, 6, 7);
        LK(21, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); SK(21, 4, 5, 6, 7);
        LK(22, 0, 1, 2, 3); SB5(0, 1, 2, 3, 4, 5, 6, 7); SK(22, 4, 5, 6, 7);
        LK(23, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); SK(23, 4, 5, 6, 7);
        LK(24, 0, 1, 2, 3); SB3(0, 1, 2, 3, 4, 5, 6, 7); SK(24, 4, 5, 6, 7);
        LK(25, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); SK(25, 4, 5, 6, 7);
        LK(26, 0, 1, 2, 3); SB1(0, 1, 2, 3, 4, 5, 6, 7); SK(26, 4, 5, 6, 7);
        LK(27, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); SK(27, 4, 5, 6, 7);
        LK(28, 0, 1, 2, 3); SB7(0, 1, 2, 3, 4, 5, 6, 7); SK(28, 4, 5, 6, 7);
        LK(29, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); SK(29, 4, 5, 6, 7);
        LK(30, 0, 1, 2, 3); SB5(0, 1, 2, 3, 4, 5, 6, 7); SK(30, 4, 5, 6, 7);
        LK(31, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); SK(31, 4, 5, 6, 7);
        LK(32, 0, 1, 2, 3); SB3(0, 1, 2, 3, 4, 5, 6, 7); SK(32, 4, 5, 6, 7);
    }
    void encrypt(uint8_t const *src, uint8_t *dst) const {
        uint32_t x[ 8];
        uint32_t t[16];
        READ_LE(x, src, 8);
        XK( 0, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK( 1, 4, 5, 6, 7); SB1(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK( 2, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK( 3, 4, 5, 6, 7); SB3(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK( 4, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK( 5, 4, 5, 6, 7); SB5(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK( 6, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK( 7, 4, 5, 6, 7); SB7(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK( 8, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK( 9, 4, 5, 6, 7); SB1(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(10, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(11, 4, 5, 6, 7); SB3(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(12, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(13, 4, 5, 6, 7); SB5(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(14, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(15, 4, 5, 6, 7); SB7(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(16, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(17, 4, 5, 6, 7); SB1(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(18, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(19, 4, 5, 6, 7); SB3(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(20, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(21, 4, 5, 6, 7); SB5(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(22, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(23, 4, 5, 6, 7); SB7(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(24, 0, 1, 2, 3); SB0(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(25, 4, 5, 6, 7); SB1(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(26, 0, 1, 2, 3); SB2(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(27, 4, 5, 6, 7); SB3(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(28, 0, 1, 2, 3); SB4(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(29, 4, 5, 6, 7); SB5(4, 5, 6, 7, 0, 1, 2, 3); XXROTL(0, 1, 2, 3); 
        XK(30, 0, 1, 2, 3); SB6(0, 1, 2, 3, 4, 5, 6, 7); XXROTL(4, 5, 6, 7); 
        XK(31, 4, 5, 6, 7); SB7(4, 5, 6, 7, 0, 1, 2, 3); XK(32, 0, 1, 2, 3); 
        WRITE_LE(dst, x, 8);
    }
    void decrypt(uint8_t const *src, uint8_t *dst) const {
        uint32_t x[ 8];
        uint32_t t[16];
        READ_LE(x, src, 8);
        XK(32, 0, 1, 2, 3); IB7(0, 1, 2, 3, 4, 5, 6, 7); XK(31, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB6(4, 5, 6, 7, 0, 1, 2, 3); XK(30, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB5(0, 1, 2, 3, 4, 5, 6, 7); XK(29, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB4(4, 5, 6, 7, 0, 1, 2, 3); XK(28, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB3(0, 1, 2, 3, 4, 5, 6, 7); XK(27, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB2(4, 5, 6, 7, 0, 1, 2, 3); XK(26, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB1(0, 1, 2, 3, 4, 5, 6, 7); XK(25, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB0(4, 5, 6, 7, 0, 1, 2, 3); XK(24, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB7(0, 1, 2, 3, 4, 5, 6, 7); XK(23, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB6(4, 5, 6, 7, 0, 1, 2, 3); XK(22, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB5(0, 1, 2, 3, 4, 5, 6, 7); XK(21, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB4(4, 5, 6, 7, 0, 1, 2, 3); XK(20, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB3(0, 1, 2, 3, 4, 5, 6, 7); XK(19, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB2(4, 5, 6, 7, 0, 1, 2, 3); XK(18, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB1(0, 1, 2, 3, 4, 5, 6, 7); XK(17, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB0(4, 5, 6, 7, 0, 1, 2, 3); XK(16, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB7(0, 1, 2, 3, 4, 5, 6, 7); XK(15, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB6(4, 5, 6, 7, 0, 1, 2, 3); XK(14, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB5(0, 1, 2, 3, 4, 5, 6, 7); XK(13, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB4(4, 5, 6, 7, 0, 1, 2, 3); XK(12, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB3(0, 1, 2, 3, 4, 5, 6, 7); XK(11, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB2(4, 5, 6, 7, 0, 1, 2, 3); XK(10, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB1(0, 1, 2, 3, 4, 5, 6, 7); XK( 9, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB0(4, 5, 6, 7, 0, 1, 2, 3); XK( 8, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB7(0, 1, 2, 3, 4, 5, 6, 7); XK( 7, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB6(4, 5, 6, 7, 0, 1, 2, 3); XK( 6, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB5(0, 1, 2, 3, 4, 5, 6, 7); XK( 5, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB4(4, 5, 6, 7, 0, 1, 2, 3); XK( 4, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB3(0, 1, 2, 3, 4, 5, 6, 7); XK( 3, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB2(4, 5, 6, 7, 0, 1, 2, 3); XK( 2, 0, 1, 2, 3);
        XXROTR(0, 1, 2, 3); IB1(0, 1, 2, 3, 4, 5, 6, 7); XK( 1, 4, 5, 6, 7);
        XXROTR(4, 5, 6, 7); IB0(4, 5, 6, 7, 0, 1, 2, 3); XK( 0, 0, 1, 2, 3);
        WRITE_LE(dst, x, 8);
    }
};
using Serpent128 = SerpentTmpl<4>;
using Serpent192 = SerpentTmpl<6>;
using Serpent256 = SerpentTmpl<8>;
#undef LK
#undef SK
#undef XK
#undef XXROTR
#undef XXROTL
#undef SB0
#undef SB1
#undef SB2
#undef SB3
#undef SB4
#undef SB5
#undef SB6
#undef SB7
#undef IB0
#undef IB1
#undef IB2
#undef IB3
#undef IB4
#undef IB5
#undef IB6
#undef IB7
