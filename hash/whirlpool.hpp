#pragma once
#include <array>
#include "hash.hpp"
#define SB_SC_MR_NRK(t, j) (                                        \
    LUT[0][t[(j + 0) % 8].b[0]].w ^ LUT[1][t[(j + 7) % 8].b[1]].w ^ \
    LUT[2][t[(j + 6) % 8].b[2]].w ^ LUT[3][t[(j + 5) % 8].b[3]].w ^ \
    LUT[4][t[(j + 4) % 8].b[4]].w ^ LUT[5][t[(j + 3) % 8].b[5]].w ^ \
    LUT[6][t[(j + 2) % 8].b[6]].w ^ LUT[7][t[(j + 1) % 8].b[7]].w   \
)
union WhirlpoolRow {
    uint64_t w;
    uint8_t b[8];
};
class Whirlpool {
    static constexpr uint8_t S_BOX[256] = {
        0x18, 0x23, 0xc6, 0xE8, 0x87, 0xB8, 0x01, 0x4F, 0x36, 0xA6, 0xd2, 0xF5, 0x79, 0x6F, 0x91, 0x52,
        0x60, 0xBc, 0x9B, 0x8E, 0xA3, 0x0c, 0x7B, 0x35, 0x1d, 0xE0, 0xd7, 0xc2, 0x2E, 0x4B, 0xFE, 0x57,
        0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xdA, 0x58, 0xc9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85,
        0xBd, 0x5d, 0x10, 0xF4, 0xcB, 0x3E, 0x05, 0x67, 0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7d, 0x95, 0xd8,
        0xFB, 0xEE, 0x7c, 0x66, 0xdd, 0x17, 0x47, 0x9E, 0xcA, 0x2d, 0xBF, 0x07, 0xAd, 0x5A, 0x83, 0x33,
        0x63, 0x02, 0xAA, 0x71, 0xc8, 0x19, 0x49, 0xd9, 0xF2, 0xE3, 0x5B, 0x88, 0x9A, 0x26, 0x32, 0xB0,
        0xE9, 0x0F, 0xd5, 0x80, 0xBE, 0xcd, 0x34, 0x48, 0xFF, 0x7A, 0x90, 0x5F, 0x20, 0x68, 0x1A, 0xAE,
        0xB4, 0x54, 0x93, 0x22, 0x64, 0xF1, 0x73, 0x12, 0x40, 0x08, 0xc3, 0xEc, 0xdB, 0xA1, 0x8d, 0x3d,
        0x97, 0x00, 0xcF, 0x2B, 0x76, 0x82, 0xd6, 0x1B, 0xB5, 0xAF, 0x6A, 0x50, 0x45, 0xF3, 0x30, 0xEF,
        0x3F, 0x55, 0xA2, 0xEA, 0x65, 0xBA, 0x2F, 0xc0, 0xdE, 0x1c, 0xFd, 0x4d, 0x92, 0x75, 0x06, 0x8A,
        0xB2, 0xE6, 0x0E, 0x1F, 0x62, 0xd4, 0xA8, 0x96, 0xF9, 0xc5, 0x25, 0x59, 0x84, 0x72, 0x39, 0x4c,
        0x5E, 0x78, 0x38, 0x8c, 0xd1, 0xA5, 0xE2, 0x61, 0xB3, 0x21, 0x9c, 0x1E, 0x43, 0xc7, 0xFc, 0x04,
        0x51, 0x99, 0x6d, 0x0d, 0xFA, 0xdF, 0x7E, 0x24, 0x3B, 0xAB, 0xcE, 0x11, 0x8F, 0x4E, 0xB7, 0xEB,
        0x3c, 0x81, 0x94, 0xF7, 0xB9, 0x13, 0x2c, 0xd3, 0xE7, 0x6E, 0xc4, 0x03, 0x56, 0x44, 0x7F, 0xA9,
        0x2A, 0xBB, 0xc1, 0x53, 0xdc, 0x0B, 0x9d, 0x6c, 0x31, 0x74, 0xF6, 0x46, 0xAc, 0x89, 0x14, 0xE1,
        0x16, 0x3A, 0x69, 0x09, 0x70, 0xB6, 0xd0, 0xEd, 0xcc, 0x42, 0x98, 0xA4, 0x28, 0x5c, 0xF8, 0x86,
    };
    static constexpr WhirlpoolRow RC[10] = {
        {.b = {0x18, 0x23, 0xc6, 0xE8, 0x87, 0xB8, 0x01, 0x4F}},
        {.b = {0x36, 0xA6, 0xd2, 0xF5, 0x79, 0x6F, 0x91, 0x52}},
        {.b = {0x60, 0xBc, 0x9B, 0x8E, 0xA3, 0x0c, 0x7B, 0x35}},
        {.b = {0x1d, 0xE0, 0xd7, 0xc2, 0x2E, 0x4B, 0xFE, 0x57}},
        {.b = {0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xdA}},
        {.b = {0x58, 0xc9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85}},
        {.b = {0xBd, 0x5d, 0x10, 0xF4, 0xcB, 0x3E, 0x05, 0x67}},
        {.b = {0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7d, 0x95, 0xd8}},
        {.b = {0xFB, 0xEE, 0x7c, 0x66, 0xdd, 0x17, 0x47, 0x9E}},
        {.b = {0xcA, 0x2d, 0xBF, 0x07, 0xAd, 0x5A, 0x83, 0x33}},
    };
    static constexpr auto WGF_multiply = [](uint8_t a, uint8_t b) { // Whirlpool's Galois Field multiplication
        uint8_t p = 0;
        for (int i = 0; i < 8; i++) {
            p = p ^ (b >> i & 0x01 ? a    : 0x00);
            a = a << 1 ^ (a & 0x80 ? 0x1D : 0x00);
        }
        return p;
    };
    static constexpr auto generate_LUT = [](WhirlpoolRow poly, uint8_t const *S_BOX) {
        // LUT[k][j] = poly * S_BOX[j] <<< k * 8
        std::array<std::array<WhirlpoolRow, 256>, 8> LUT = {};
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 256; j++) {
                uint8_t p = WGF_multiply(poly.b[i], S_BOX[j]);
                for (int k = 0; k < 8; k++) {
                    LUT[k][j].b[(i + k) % 8] = p;
                }
            }
        }
        return LUT;
    };
    static constexpr auto LUT = generate_LUT({.b = {1, 1, 4, 1, 8, 5, 2, 9}}, S_BOX);
    void compress(WhirlpoolRow const *b) {
        WhirlpoolRow s[8], k[8], t[8];
        s[0].w = b[0].w ^ (k[0].w = h[0].w);
        s[1].w = b[1].w ^ (k[1].w = h[1].w);
        s[2].w = b[2].w ^ (k[2].w = h[2].w);
        s[3].w = b[3].w ^ (k[3].w = h[3].w);
        s[4].w = b[4].w ^ (k[4].w = h[4].w);
        s[5].w = b[5].w ^ (k[5].w = h[5].w);
        s[6].w = b[6].w ^ (k[6].w = h[6].w);
        s[7].w = b[7].w ^ (k[7].w = h[7].w);
        for (int i = 0; i < 10; i++) {
            t[0].w = k[0].w;
            t[1].w = k[1].w;
            t[2].w = k[2].w;
            t[3].w = k[3].w;
            t[4].w = k[4].w;
            t[5].w = k[5].w;
            t[6].w = k[6].w;
            t[7].w = k[7].w;
            k[0].w = SB_SC_MR_NRK(t, 0) ^ RC[i].w;
            k[1].w = SB_SC_MR_NRK(t, 1);
            k[2].w = SB_SC_MR_NRK(t, 2);
            k[3].w = SB_SC_MR_NRK(t, 3);
            k[4].w = SB_SC_MR_NRK(t, 4);
            k[5].w = SB_SC_MR_NRK(t, 5);
            k[6].w = SB_SC_MR_NRK(t, 6);
            k[7].w = SB_SC_MR_NRK(t, 7);
            t[0].w = s[0].w;
            t[1].w = s[1].w;
            t[2].w = s[2].w;
            t[3].w = s[3].w;
            t[4].w = s[4].w;
            t[5].w = s[5].w;
            t[6].w = s[6].w;
            t[7].w = s[7].w;
            s[0].w = SB_SC_MR_NRK(t, 0) ^ k[0].w;
            s[1].w = SB_SC_MR_NRK(t, 1) ^ k[1].w;
            s[2].w = SB_SC_MR_NRK(t, 2) ^ k[2].w;
            s[3].w = SB_SC_MR_NRK(t, 3) ^ k[3].w;
            s[4].w = SB_SC_MR_NRK(t, 4) ^ k[4].w;
            s[5].w = SB_SC_MR_NRK(t, 5) ^ k[5].w;
            s[6].w = SB_SC_MR_NRK(t, 6) ^ k[6].w;
            s[7].w = SB_SC_MR_NRK(t, 7) ^ k[7].w;
        }
        h[0].w ^= s[0].w ^ b[0].w;
        h[1].w ^= s[1].w ^ b[1].w;
        h[2].w ^= s[2].w ^ b[2].w;
        h[3].w ^= s[3].w ^ b[3].w;
        h[4].w ^= s[4].w ^ b[4].w;
        h[5].w ^= s[5].w ^ b[5].w;
        h[6].w ^= s[6].w ^ b[6].w;
        h[7].w ^= s[7].w ^ b[7].w;
    }
    WhirlpoolRow h[8] = {};
    uint64_t ctr[4] = {};
public:
    static constexpr size_t BLOCK_SIZE = 64;
    static constexpr size_t DIGEST_SIZE = 64;
    static constexpr bool NO_PADDING = false;
    void push(uint8_t const *data) {
        WhirlpoolRow w[8];
        memcpy(w, data, 64);
        (ctr[3] += 512) < 512
            && ++ctr[2] == 0
            && ++ctr[1] == 0
            && ++ctr[0] == 0;
        compress(w);
    }
    void hash(uint8_t const *src, size_t len, uint8_t *hash) {
        WhirlpoolRow w[8];
        memset(w, 0, 64);
        memcpy(w, src, len);
        (ctr[3] += len * 8) < len * 8
            && ++ctr[2] == 0
            && ++ctr[1] == 0
            && ++ctr[0] == 0;
        ((uint8_t *)w)[len] = 0x80;
        if (len >= 32) {
            compress(w);
            memset(w, 0, 32);
        }
        PUT_BE(w[4].b, ctr[0]);
        PUT_BE(w[5].b, ctr[1]);
        PUT_BE(w[6].b, ctr[2]);
        PUT_BE(w[7].b, ctr[3]);
        compress(w);
        memcpy(hash, h, 64);
    }
};
#undef SB_SC_MR_NRK
