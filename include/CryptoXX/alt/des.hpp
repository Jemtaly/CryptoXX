#pragma once
#include "CryptoXX/utils.hpp"
#define ROTL28(x, n) ((x) << (n) & 0x0FFFFFFF | (x) >> (28 - (n)))
// choose the type of unsigned integer to use based on the bit width
template <int WD>
using DESUint = typename std::conditional<WD <= 32, uint32_t, uint64_t>::type;
// WI: width of input, WO: width of output
template <int WI, int WO>
struct DESPermutation {
    bits_t A[WO];
    // permutation function
    DESUint<WO> operator()(DESUint<WI> vi) const {
        DESUint<WO> vo = 0;
        FOR_(o, 0, o + 1, o < WO, {
            vo |= (DESUint<WO>)(vi >> A[o] & 1) << o;
        });
        return vo;
    }
};
class DES {
    static constexpr bits_t SHIFT[16] = {
        1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1,
    };
    // all permutations are modified, so that the LSB is represented by 0 in both input and output
    static constexpr DESPermutation<64, 56> PC1 = {
        0x3c, 0x34, 0x2c, 0x24, 0x3b, 0x33, 0x2b, 0x23,
        0x1b, 0x13, 0x0b, 0x03, 0x3a, 0x32, 0x2a, 0x22,
        0x1a, 0x12, 0x0a, 0x02, 0x39, 0x31, 0x29, 0x21,
        0x19, 0x11, 0x09, 0x01, 0x1c, 0x14, 0x0c, 0x04,
        0x3d, 0x35, 0x2d, 0x25, 0x1d, 0x15, 0x0d, 0x05,
        0x3e, 0x36, 0x2e, 0x26, 0x1e, 0x16, 0x0e, 0x06,
        0x3f, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07,
    };
    static constexpr DESPermutation<56, 48> PC2 = {
        0x18, 0x1b, 0x14, 0x06, 0x0e, 0x0a, 0x03, 0x16,
        0x00, 0x11, 0x07, 0x0c, 0x08, 0x17, 0x0b, 0x05,
        0x10, 0x1a, 0x01, 0x09, 0x13, 0x19, 0x04, 0x0f,
        0x36, 0x2b, 0x24, 0x1d, 0x31, 0x28, 0x30, 0x1e,
        0x34, 0x2c, 0x25, 0x21, 0x2e, 0x23, 0x32, 0x29,
        0x1c, 0x35, 0x33, 0x37, 0x20, 0x2d, 0x27, 0x2a,
    };
    static constexpr DESPermutation<64, 64> IP = {
        0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01,
        0x3b, 0x33, 0x2b, 0x23, 0x1b, 0x13, 0x0b, 0x03,
        0x3d, 0x35, 0x2d, 0x25, 0x1d, 0x15, 0x0d, 0x05,
        0x3f, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07,
        0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08, 0x00,
        0x3a, 0x32, 0x2a, 0x22, 0x1a, 0x12, 0x0a, 0x02,
        0x3c, 0x34, 0x2c, 0x24, 0x1c, 0x14, 0x0c, 0x04,
        0x3e, 0x36, 0x2e, 0x26, 0x1e, 0x16, 0x0e, 0x06,
    };
    static constexpr DESPermutation<64, 64> FP = {
        0x27, 0x07, 0x2f, 0x0f, 0x37, 0x17, 0x3f, 0x1f,
        0x26, 0x06, 0x2e, 0x0e, 0x36, 0x16, 0x3e, 0x1e,
        0x25, 0x05, 0x2d, 0x0d, 0x35, 0x15, 0x3d, 0x1d,
        0x24, 0x04, 0x2c, 0x0c, 0x34, 0x14, 0x3c, 0x1c,
        0x23, 0x03, 0x2b, 0x0b, 0x33, 0x13, 0x3b, 0x1b,
        0x22, 0x02, 0x2a, 0x0a, 0x32, 0x12, 0x3a, 0x1a,
        0x21, 0x01, 0x29, 0x09, 0x31, 0x11, 0x39, 0x19,
        0x20, 0x00, 0x28, 0x08, 0x30, 0x10, 0x38, 0x18,
    };
    static constexpr DESPermutation<32, 48> E = {
        0x1f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08, 0x07, 0x08, 0x09, 0x0a,
        0x0b, 0x0c, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18, 0x17, 0x18, 0x19, 0x1a,
        0x1b, 0x1c, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00,
    };
    static constexpr DESPermutation<32, 32> P = {
        0x07, 0x1c, 0x15, 0x0a, 0x1a, 0x02, 0x13, 0x0d,
        0x17, 0x1d, 0x05, 0x00, 0x12, 0x08, 0x18, 0x1e,
        0x16, 0x01, 0x0e, 0x1b, 0x06, 0x09, 0x11, 0x1f,
        0x0f, 0x04, 0x14, 0x03, 0x0b, 0x0c, 0x19, 0x10,
    };
    // each S-box is expanded into a 1D array, the original order of rows and columns are adjusted to avoid bit shifts
    static constexpr uint8_t S_BOX[8][64] = {
        0xd, 0x1, 0x2, 0xf, 0x8, 0xd, 0x4, 0x8, 0x6, 0xa, 0xf, 0x3, 0xb, 0x7, 0x1, 0x4,
        0xa, 0xc, 0x9, 0x5, 0x3, 0x6, 0xe, 0xb, 0x5, 0x0, 0x0, 0xe, 0xc, 0x9, 0x7, 0x2,
        0x7, 0x2, 0xb, 0x1, 0x4, 0xe, 0x1, 0x7, 0x9, 0x4, 0xc, 0xa, 0xe, 0x8, 0x2, 0xd,
        0x0, 0xf, 0x6, 0xc, 0xa, 0x9, 0xd, 0x0, 0xf, 0x3, 0x3, 0x5, 0x5, 0x6, 0x8, 0xb,
        0x4, 0xd, 0xb, 0x0, 0x2, 0xb, 0xe, 0x7, 0xf, 0x4, 0x0, 0x9, 0x8, 0x1, 0xd, 0xa,
        0x3, 0xe, 0xc, 0x3, 0x9, 0x5, 0x7, 0xc, 0x5, 0x2, 0xa, 0xf, 0x6, 0x8, 0x1, 0x6,
        0x1, 0x6, 0x4, 0xb, 0xb, 0xd, 0xd, 0x8, 0xc, 0x1, 0x3, 0x4, 0x7, 0xa, 0xe, 0x7,
        0xa, 0x9, 0xf, 0x5, 0x6, 0x0, 0x8, 0xf, 0x0, 0xe, 0x5, 0x2, 0x9, 0x3, 0x2, 0xc,
        0xc, 0xa, 0x1, 0xf, 0xa, 0x4, 0xf, 0x2, 0x9, 0x7, 0x2, 0xc, 0x6, 0x9, 0x8, 0x5,
        0x0, 0x6, 0xd, 0x1, 0x3, 0xd, 0x4, 0xe, 0xe, 0x0, 0x7, 0xb, 0x5, 0x3, 0xb, 0x8,
        0x9, 0x4, 0xe, 0x3, 0xf, 0x2, 0x5, 0xc, 0x2, 0x9, 0x8, 0x5, 0xc, 0xf, 0x3, 0xa,
        0x7, 0xb, 0x0, 0xe, 0x4, 0x1, 0xa, 0x7, 0x1, 0x6, 0xd, 0x0, 0xb, 0x8, 0x6, 0xd,
        0x2, 0xe, 0xc, 0xb, 0x4, 0x2, 0x1, 0xc, 0x7, 0x4, 0xa, 0x7, 0xb, 0xd, 0x6, 0x1,
        0x8, 0x5, 0x5, 0x0, 0x3, 0xf, 0xf, 0xa, 0xd, 0x3, 0x0, 0x9, 0xe, 0x8, 0x9, 0x6,
        0x4, 0xb, 0x2, 0x8, 0x1, 0xc, 0xb, 0x7, 0xa, 0x1, 0xd, 0xe, 0x7, 0x2, 0x8, 0xd,
        0xf, 0x6, 0x9, 0xf, 0xc, 0x0, 0x5, 0x9, 0x6, 0xa, 0x3, 0x4, 0x0, 0x5, 0xe, 0x3,
        0x7, 0xd, 0xd, 0x8, 0xe, 0xb, 0x3, 0x5, 0x0, 0x6, 0x6, 0xf, 0x9, 0x0, 0xa, 0x3,
        0x1, 0x4, 0x2, 0x7, 0x8, 0x2, 0x5, 0xc, 0xb, 0x1, 0xc, 0xa, 0x4, 0xe, 0xf, 0x9,
        0xa, 0x3, 0x6, 0xf, 0x9, 0x0, 0x0, 0x6, 0xc, 0xa, 0xb, 0x1, 0x7, 0xd, 0xd, 0x8,
        0xf, 0x9, 0x1, 0x4, 0x3, 0x5, 0xe, 0xb, 0x5, 0xc, 0x2, 0x7, 0x8, 0x2, 0x4, 0xe,
        0xa, 0xd, 0x0, 0x7, 0x9, 0x0, 0xe, 0x9, 0x6, 0x3, 0x3, 0x4, 0xf, 0x6, 0x5, 0xa,
        0x1, 0x2, 0xd, 0x8, 0xc, 0x5, 0x7, 0xe, 0xb, 0xc, 0x4, 0xb, 0x2, 0xf, 0x8, 0x1,
        0xd, 0x1, 0x6, 0xa, 0x4, 0xd, 0x9, 0x0, 0x8, 0x6, 0xf, 0x9, 0x3, 0x8, 0x0, 0x7,
        0xb, 0x4, 0x1, 0xf, 0x2, 0xe, 0xc, 0x3, 0x5, 0xb, 0xa, 0x5, 0xe, 0x2, 0x7, 0xc,
        0xf, 0x3, 0x1, 0xd, 0x8, 0x4, 0xe, 0x7, 0x6, 0xf, 0xb, 0x2, 0x3, 0x8, 0x4, 0xe,
        0x9, 0xc, 0x7, 0x0, 0x2, 0x1, 0xd, 0xa, 0xc, 0x6, 0x0, 0x9, 0x5, 0xb, 0xa, 0x5,
        0x0, 0xd, 0xe, 0x8, 0x7, 0xa, 0xb, 0x1, 0xa, 0x3, 0x4, 0xf, 0xd, 0x4, 0x1, 0x2,
        0x5, 0xb, 0x8, 0x6, 0xc, 0x7, 0x6, 0xc, 0x9, 0x0, 0x3, 0x5, 0x2, 0xe, 0xf, 0x9,
        0xe, 0x0, 0x4, 0xf, 0xd, 0x7, 0x1, 0x4, 0x2, 0xe, 0xf, 0x2, 0xb, 0xd, 0x8, 0x1,
        0x3, 0xa, 0xa, 0x6, 0x6, 0xc, 0xc, 0xb, 0x5, 0x9, 0x9, 0x5, 0x0, 0x3, 0x7, 0x8,
        0x4, 0xf, 0x1, 0xc, 0xe, 0x8, 0x8, 0x2, 0xd, 0x4, 0x6, 0x9, 0x2, 0x1, 0xb, 0x7,
        0xf, 0x5, 0xc, 0xb, 0x9, 0x3, 0x7, 0xe, 0x3, 0xa, 0xa, 0x0, 0x5, 0x6, 0x0, 0xd,
    };
    static DESUint<32> f(DESUint<32> r, DESUint<48> k) {
        DESUint<48> x = E(r) ^ k;
        DESUint<32> y =
            S_BOX[0][x       & 0x3f]       |
            S_BOX[1][x >>  6 & 0x3f] <<  4 |
            S_BOX[2][x >> 12 & 0x3f] <<  8 |
            S_BOX[3][x >> 18 & 0x3f] << 12 |
            S_BOX[4][x >> 24 & 0x3f] << 16 |
            S_BOX[5][x >> 30 & 0x3f] << 20 |
            S_BOX[6][x >> 36 & 0x3f] << 24 |
            S_BOX[7][x >> 42       ] << 28;
        return P(y);
    }
    DESUint<48> rk[16];
public:
    static constexpr size_t BLOCK_SIZE = 8;
    static constexpr size_t KEY_SIZE = 8;
    DES(uint8_t const *mk) {
        DESUint<56> t = PC1(GET_BE<DESUint<64>>(mk));
        DESUint<28> l = t >> 28, r = t & 0x0FFFFFFF;
        for (int i = 0; i < 16; i++) {
            l = ROTL28(l, SHIFT[i]);
            r = ROTL28(r, SHIFT[i]);
            rk[i] = PC2((DESUint<56>)l << 28 | r);
        }
    }
    void encrypt(uint8_t const *src, uint8_t *dst) const {
        DESUint<64> t = IP(GET_BE<DESUint<64>>(src));
        DESUint<32> l = t >> 32, r = t & 0xFFFFFFFF;
        for (int i = 0; i < 16;) {
            l ^= f(r, rk[i++]);
            r ^= f(l, rk[i++]);
        }
        PUT_BE(dst, FP((DESUint<64>)r << 32 | l));
    }
    void decrypt(uint8_t const *src, uint8_t *dst) const {
        DESUint<64> t = IP(GET_BE<DESUint<64>>(src));
        DESUint<32> l = t >> 32, r = t & 0xFFFFFFFF;
        for (int i = 16; i > 0;) {
            l ^= f(r, rk[--i]);
            r ^= f(l, rk[--i]);
        }
        PUT_BE(dst, FP((DESUint<64>)r << 32 | l));
    }
};
class TDES2K {
    DES des[2];
public:
    static constexpr size_t BLOCK_SIZE = DES::BLOCK_SIZE;
    static constexpr size_t KEY_SIZE = DES::KEY_SIZE * 2;
    TDES2K(uint8_t const *mk):
        des{
            mk + DES::KEY_SIZE * 0,
            mk + DES::KEY_SIZE * 1,
        } {}
    void encrypt(uint8_t const *src, uint8_t *dst) const {
        des[0].encrypt(src, dst);
        des[1].decrypt(dst, dst);
        des[0].encrypt(dst, dst);
    }
    void decrypt(uint8_t const *src, uint8_t *dst) const {
        des[0].decrypt(src, dst);
        des[1].encrypt(dst, dst);
        des[0].decrypt(dst, dst);
    }
};
class TDES3K {
    DES des[3];
public:
    static constexpr size_t BLOCK_SIZE = DES::BLOCK_SIZE;
    static constexpr size_t KEY_SIZE = DES::KEY_SIZE * 3;
    TDES3K(uint8_t const *mk):
        des{
            mk + DES::KEY_SIZE * 0,
            mk + DES::KEY_SIZE * 1,
            mk + DES::KEY_SIZE * 2,
        } {}
    void encrypt(uint8_t const *src, uint8_t *dst) const {
        des[0].encrypt(src, dst);
        des[1].decrypt(dst, dst);
        des[2].encrypt(dst, dst);
    }
    void decrypt(uint8_t const *src, uint8_t *dst) const {
        des[2].decrypt(src, dst);
        des[1].encrypt(dst, dst);
        des[0].decrypt(dst, dst);
    }
};
